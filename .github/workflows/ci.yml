name: CI
on:
  push:
    branches:
      - '!main'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  PYTEST_VERBOSITY: "2"

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.1.0
      with:
        poetry-version: 1.7.1
    - name: View poetry version
      run: poetry --version
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        poetry config http-basic.${{ vars.AZURE_ARTIFACT_ORG }} ${{ vars.AZURE_ARTIFACTS_USERNAME }} ${{ secrets.AZURE_ARTIFACT_TOKEN }}
        poetry install
    - name: Set path
      run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
    - name: Run the automated tests
      env:
        pytest_verbosity: ${{ env.PYTEST_VERBOSITY }}
      run: |
        poetry run pytest --github-report --doctest-modules --cov=$PACKAGE_PATH --cov-report term-missing --cov-report=html --junitxml=pytest.xml | tee pytest-coverage.txt
    - name: Pytest coverage comment
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: pytest-coverage.txt
        junitxml-path: pytest.xml
    - name: Pytest coverage GitHub summary
      if: ${{ success() }}
      run: |
        set -o pipefail
        echo '### Coverage report' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.coverageComment.outputs.coverageHtml }}' >> $GITHUB_STEP_SUMMARY
