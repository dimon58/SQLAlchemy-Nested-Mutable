name: CI
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        type: environment

permissions:
      id-token: write
      issues: write
      pull-requests: write
      contents: write

env:
  PYTHON_VERSION: "3.11"
  PYTEST_VERBOSITY: "2"
  AZURE_ARTIFACT_ORG: BMA-DSAI
  AZURE_ARTIFACT_FEED: DSAI
  AZURE_ARTIFACTS_USERNAME: DSAI
  SRC_PATH: ./src/sqlalchemyv2_nested_mutable
  SRC_DISTRIBUTION_PATH: ./src/sqlalchemyv2_nested_mutable/dist/*

jobs:
  ci:
    runs-on: ubuntu-latest
    environment: DEVELOPMENT
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.1.0
      with:
        poetry-version: 1.7.1
    - name: View poetry version
      run: poetry --version
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        poetry config http-basic.DSAI $AZURE_ARTIFACTS_USERNAME ${{ secrets.AZURE_ARTIFACT_TOKEN }}
        poetry install
    - name: Set path
      run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
    - name: Run the automated tests
      env:
        pytest_verbosity: ${{ env.PYTEST_VERBOSITY }}
      run: |
        poetry run pytest --github-report --doctest-modules --cov=. --cov-report term-missing --cov-report=html --junitxml=pytest.xml | tee pytest-coverage.txt
    - name: Pytest coverage comment
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: pytest-coverage.txt
        junitxml-path: pytest.xml
      # add content to GitHub summary (&& github.event_name == 'pull_request')
    - name: Pytest coverage GitHub summary
      if: ${{ success() }}
      run: |
        set -o pipefail
        echo '### Coverage report' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.coverageComment.outputs.coverageHtml }}' >> $GITHUB_STEP_SUMMARY

  release:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    concurrency: release
    environment: DEVELOPMENT
    permissions:
      id-token: write
      contents: write
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.1.0
      with:
        poetry-version: 1.7.1
    - name: View poetry version
      run: poetry --version
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        poetry config http-basic.DSAI $AZURE_ARTIFACTS_USERNAME ${{ secrets.AZURE_ARTIFACT_TOKEN }}
        poetry install
    - name: Set path
      run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
    - name: Install dotnet dsk
      run: |
        sudo apt-get install -y dotnet-sdk-8.0
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@master
      with:
        directory: ${{ env.SRC_PATH }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to Azure Artifacts
      run: |
        twine upload --repository-url https://pkgs.dev.azure.com/${{ env.AZURE_ARTIFACT_ORG }}/_packaging/${{ env.AZURE_ARTIFACT_FEED }}/pypi/upload ${{ env.SRC_DISTRIBUTION_PATH }}
