name: Build & Release Package
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_publish:
        type: boolean
        description: Force Publish To Azure Artifacts?
        default: false

permissions:
      id-token: write
      issues: write
      pull-requests: write
      contents: write

env:
  PYTHON_VERSION: "3.11"
  PYTEST_VERBOSITY: "2"
  SRC_PATH: ./
  PACKAGE_PATH: ./src/sqlalchemyv2_nested_mutable
  SRC_DISTRIBUTION_PATH: ./dist/*

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
    steps:
    - uses: actions/checkout@v3
      # You must set fetch-depth to 0 when using actions/checkout@v3, since Python Semantic Release needs
      # access to the full history to determine whether a release should be made.
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.1.0
      with:
        poetry-version: 1.7.1
    - name: View poetry version
      run: poetry --version
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - name: Setup poetry url feeds for sources/repositories for Azure Artifacts (download & upload)
      run: |
        poetry config http-basic.${{ vars.AZURE_ARTIFACT_FEED }} ${{ vars.AZURE_ARTIFACTS_USERNAME }} ${{ secrets.AZURE_ARTIFACT_TOKEN }}
        poetry config repositories.${{ vars.AZURE_ARTIFACT_FEED }} https://pkgs.dev.azure.com/${{ vars.AZURE_ARTIFACT_ORG }}/_packaging/${{ vars.AZURE_ARTIFACT_FEED }}/pypi/upload
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        poetry install
    - name: Set path
      run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
    - name: Install dotnet SDK
      run: |
        sudo apt-get install -y dotnet-sdk-8.0
    - name: Python Semantic Release
      id: semantic_release
      uses: python-semantic-release/python-semantic-release@master
      with:
        directory: ${{ env.SRC_PATH }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to Azure Artifacts
      if: ${{ steps.semantic_release.outputs.released == 'true' || github.event.inputs.force_release == 'true' }}
      run: |
        echo ${{ steps.semantic_release.outputs.released }}
        echo ${{ github.event.inputs.force_publish }}
        poetry publish --build -r ${{ vars.AZURE_ARTIFACT_FEED }}
